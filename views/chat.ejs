<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <link rel="stylesheet" href="/css/styles.css">
</head>
<body class="chat-page">
    <div class="chat-container">
        <aside class="sidebar">
            <!-- <h2>Chat Rooms</h2>
            <ul id="rooms-list"></ul>
            <input type="text" id="new-room" placeholder="New room name">
            <button id="create-room">Create Room</button> -->
            <h2>Online Users</h2>
            <ul id="users-list"></ul>
        </aside>
        <main class="chat-main">
            <header class="chat-header">
                <h1 id="room-name">Chat Room</h1>
                <div>
                    <a href="/profile" class="btn btn-secondary">Profile</a>
                    <a href="/auth/logout" class="btn btn-secondary">Logout</a>
                </div>
            </header>
            <div id="chat-messages" class="chat-messages"></div>
            <form id="chat-form" class="chat-form">
                <input id="msg" type="text" placeholder="Type a message..." required autocomplete="off">
                <button type="submit" class="btn btn-primary">Send</button>
            </form>
        </main>
    </div>
    <script src="/socket.io/socket.io.js"></script>
    <script>
        const socket = io();
        const username = '<%= user.username %>';
        const avatar = '<%= user.avatar %>';
        const room = 'General'; // Default room
        let currentRoom = room;

        // Listen for messages from the server
        socket.on('chat message', (data) => {
            if (data.username !== username) {
                appendMessage(data);
            }
        });

        document.getElementById('chat-form').addEventListener('submit', (e) => {
            e.preventDefault();
            const msg = document.getElementById('msg').value;
            if (msg.trim()) {
                socket.emit('chat message', { text: msg }, currentRoom);
                appendMessage({ username, text: msg, avatar, timestamp: new Date().toLocaleString() }); // Only append locally
                document.getElementById('msg').value = '';
            }
        });

        function appendMessage(data) {
            const messagesDiv = document.getElementById('chat-messages');
            const messageElement = document.createElement('div');
            messageElement.classList.add('message', data.username === username ? 'sent' : 'received');
            messageElement.innerHTML = `
                <img src="${data.avatar}" alt="${data.username}" class="avatar">
                <div class="message-content">
                    <p class="username">${data.username}</p>
                    <p class="text">${data.text}</p>
                    <p class="timestamp">${new Date(data.timestamp).toLocaleTimeString()}</p>
                </div>
            `;
            messagesDiv.append(messageElement);
            messagesDiv.scrollTop = messagesDiv.scrollHeight;
        }

        socket.on('user joined', (message) => {
            appendSystemMessage(message);
        });

        socket.on('user left', (message) => {
            appendSystemMessage(message);
        });

        function appendSystemMessage(message) {
            const messagesDiv = document.getElementById('chat-messages');
            const messageElement = document.createElement('div');
            messageElement.classList.add('system-message');
            messageElement.innerHTML = `<span>${message}</span>`;
            messagesDiv.appendChild(messageElement);
            messagesDiv.scrollTop = messagesDiv.scrollHeight;
        }

        socket.on('chat history', (messages) => {
            messages.forEach(msg => {
                appendMessage({
                    username: msg.sender.username,
                    text: msg.content,
                    avatar: msg.sender.avatar || '/images/default-avatar.png',
                    timestamp: msg.timestamp
                });
            });
        });

        socket.on('update active users', (users) => {
            const usersList = document.getElementById('users-list');
            usersList.innerHTML = '';
            users.forEach(user => {
                const userElement = document.createElement('li');
                if (user === username) {
                    userElement.textContent = `${user} (You)`;
                } else {
                    userElement.textContent = user;
                }
                usersList.appendChild(userElement);
            });
        });

        localStorage.setItem('socketId', socket.id);
        const storedSocketId = localStorage.getItem('socketId');
        if (storedSocketId) {
            socket.connect();
        }
    </script>
</body>
</html>
