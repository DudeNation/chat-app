<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <link rel="stylesheet" href="/css/styles.css">
</head>
<body class="chat-page">
    <div class="chat-container">
        <aside class="sidebar">
            <!-- <h2>Chat Rooms</h2>
            <ul id="rooms-list"></ul>
            <input type="text" id="new-room" placeholder="New room name">
            <button id="create-room">Create Room</button> -->
            <h2>Online Users</h2>
            <ul id="users-list"></ul>
        </aside>
        <main class="chat-main">
            <header class="chat-header">
                <h1 id="room-name">Chat Room</h1>
                <div>
                    <a href="/profile" class="btn btn-secondary">Profile</a>
                    <a href="/auth/logout" class="btn btn-secondary">Logout</a>
                </div>
            </header>
            <div id="chat-messages" class="chat-messages">
                <div class="messages-container"></div>
                <form id="chat-form" class="chat-form">
                    <input id="msg" type="text" placeholder="Type a message..." required autocomplete="off">
                    <button type="submit" class="btn btn-primary">Send</button>
                </form>
            </div>
        </main>
    </div>
    <script src="/socket.io/socket.io.js"></script>
    <script>
        const socket = io();
        const username = '<%= user.username %>';
        const avatar = '<%= user.avatar %>';
        const room = 'General'; // Default room
        let currentRoom = room;

        // Listen for messages from the server
        socket.on('chat message', (data) => {
            if (data.username !== username) {
                appendMessage(data);
            }
        });

        document.getElementById('chat-form').addEventListener('submit', (e) => {
            e.preventDefault();
            const msg = document.getElementById('msg').value;
            if (msg.trim()) {
                socket.emit('chat message', { text: msg }, currentRoom);
                appendMessage({ username, text: msg, avatar, timestamp: new Date().toLocaleString() }); // Only append locally
                document.getElementById('msg').value = '';
            }
        });

        function appendMessage(data) {
            const messagesContainer = document.querySelector('.messages-container');
            const messageElement = document.createElement('div');
            messageElement.classList.add('message', data.username === username ? 'sent' : 'received');

            let messageContent = data.text;
            if (data.url_info && data.url_info.title) {
                messageContent += `
                    <div class="url-preview">
                        <a href="${data.text}" target="_blank">
                            <img src="${data.url_info.image}" alt="${data.url_info.title}">
                            <div class="url-info">
                                <h4>${data.url_info.title}</h4>
                                <p>${data.url_info.description}</p>
                            </div>
                        </a>
                    </div>
                `;
            } else {
                // wrap URLs in <a> tags and truncate long URLs
                messageContent = messageContent.replace(/(https?:\/\/\S+)/gi, (url) => {
                    const truncatedUrl = url.length > 30 ? url.substr(0, 30) + '...' : url;
                    return `<a href="${url}" target="_blank">${truncatedUrl}</a>`;
                });
            }

            messageElement.innerHTML = `
                <img src="${data.avatar}" alt="${data.username}" class="avatar">
                <div class="message-content">
                    <p class="username"><strong>${data.username}</strong></p>
                    <div class="text">${messageContent}</div>
                    <p class="timestamp">${new Date(data.timestamp).toLocaleTimeString()}</p>
                </div>
            `;
            messagesContainer.append(messageElement);
            messagesContainer.scrollTop = messagesContainer.scrollHeight;
        }

        socket.on('user joined', (message) => {
            appendSystemMessage(message);
        });

        socket.on('user left', (message) => {
            appendSystemMessage(message);
        });

        function appendSystemMessage(message) {
            const messagesContainer = document.querySelector('.messages-container');
            const messageElement = document.createElement('div');
            messageElement.classList.add('system-message');
            messageElement.innerHTML = `<span>${message}</span>`;
            messagesContainer.appendChild(messageElement);
            messagesContainer.scrollTop = messagesContainer.scrollHeight;
        }

        socket.on('chat history', (messages) => {
            messages.forEach(msg => {
                appendMessage({
                    username: msg.sender.username,
                    text: msg.content,
                    avatar: msg.sender.avatar || '/images/default-avatar.png',
                    timestamp: msg.timestamp
                });
            });
        });

        socket.on('update active users', (users) => {
            const usersList = document.getElementById('users-list');
            usersList.innerHTML = '';
            users.forEach(user => {
                const userElement = document.createElement('li');
                userElement.innerHTML = `
                    <div class="user-item">
                        <img src="${user.avatar}" alt="${user.username}" class="avatar ${user.status}">
                        <span class="username">${user.username}${user.username === username ? ' (You)' : ''}</span>
                    </div>
                `;
                usersList.appendChild(userElement);
            });
        });

        localStorage.setItem('socketId', socket.id);
        const storedSocketId = localStorage.getItem('socketId');
        if (storedSocketId) {
            socket.connect();
        }
    </script>
    <style>
        .chat-messages {
          height: 70vh;
          overflow-y: auto;
          flex-direction: column;
        }

        .messages-container {
          flex: 1;
          overflow-y: auto;
          padding: 1rem;
        }

        .chat-form {
          display: flex;
          padding: 1rem;
          background: #f0f0f0;
        }

        .chat-form input {
          flex: 1;
          padding: 0.5rem;
          border: none;
          border-radius: 4px;
        }

        .chat-form button {
          margin-left: 1rem;
        }

        .user-item {
          display: flex;
          align-items: center;
        }
      
        .username {
          font-weight: bold;
          margin-left: 10px;
        }
      
        .avatar {
          width: 40px;
          height: 40px;
          border-radius: 50%;
          margin-right: 10px;
        }
      
        .avatar.online {
          border: 2px solid green;
        }
      
        .avatar.offline {
          filter: grayscale(100%);
        }

        .url-preview {
            margin-top: 10px;
            border: 1px solid #ddd;
            border-radius: 5px;
            overflow: hidden;
        }

        .url-preview a {
            display: flex;
            text-decoration: none;
            color: #333;
        }

        .url-preview img {
            width: 100px;
            height: 100px;
            object-fit: cover;
        }

        .url-preview .url-info {
            padding: 10px;
        }

        .url-preview h4 {
            margin: 0;
            font-size: 16px;
        }

        .url-preview p {
            margin: 5px 0 0;
            font-size: 14px;
            color: #666;
        }
      </style>
</body>
</html>
